=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250918.173746

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module VeniceClient
  class GenerateImageRequest
    # CFG scale parameter. Higher values lead to more adherence to the prompt.
    attr_accessor :cfg_scale

    # Embed prompt generation information into the image's EXIF metadata.
    attr_accessor :embed_exif_metadata

    # The image format to return. WebP are smaller and optimized for web use. PNG are higher quality but larger in file size. 
    attr_accessor :format

    # Height of the generated image. Each model has a specific height and width divisor listed in the widthHeightDivisor constraint in the model list endpoint.
    attr_accessor :height

    # Whether to hide the Venice watermark. Venice may ignore this parameter for certain generated content.
    attr_accessor :hide_watermark

    # This feature is deprecated and was disabled on May 19th, 2025. A revised in-painting API will be launched in the near future.
    attr_accessor :inpaint

    # Lora strength for the model. Only applies if the model uses additional Loras.
    attr_accessor :lora_strength

    # The model to use for image generation.
    attr_accessor :model

    # A description of what should not be in the image. Character limit is model specific and is listed in the promptCharacterLimit constraint in the model list endpoint.
    attr_accessor :negative_prompt

    # The description for the image. Character limit is model specific and is listed in the promptCharacterLimit setting in the model list endpoint.
    attr_accessor :prompt

    # Whether to return binary image data instead of base64.
    attr_accessor :return_binary

    # Number of images to generate (1â€“4). Only supported when return_binary is false.
    attr_accessor :variants

    # Whether to use safe mode. If enabled, this will blur images that are classified as having adult content.
    attr_accessor :safe_mode

    # Random seed for generation. If not provided, a random seed will be used.
    attr_accessor :seed

    # Number of inference steps. The following models have reduced max steps from the global max: venice-sd35: 30 max steps, hidream: 50 max steps, flux.1-krea: 30 max steps, flux-dev: 30 max steps, flux-dev-uncensored: 30 max steps, lustify-sdxl: 50 max steps, lustify-v7: 25 max steps, pony-realism: 50 max steps, qwen-image: 8 max steps, stable-diffusion-3.5: 30 max steps, wai-Illustrious: 30 max steps. These constraints are exposed in the model list endpoint for each model.
    attr_accessor :steps

    # An image style to apply to the image. Visit https://docs.venice.ai/api-reference/endpoint/image/styles for more details.
    attr_accessor :style_preset

    # Width of the generated image. Each model has a specific height and width divisor listed in the widthHeightDivisor constraint in the model list endpoint.
    attr_accessor :width

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cfg_scale' => :'cfg_scale',
        :'embed_exif_metadata' => :'embed_exif_metadata',
        :'format' => :'format',
        :'height' => :'height',
        :'hide_watermark' => :'hide_watermark',
        :'inpaint' => :'inpaint',
        :'lora_strength' => :'lora_strength',
        :'model' => :'model',
        :'negative_prompt' => :'negative_prompt',
        :'prompt' => :'prompt',
        :'return_binary' => :'return_binary',
        :'variants' => :'variants',
        :'safe_mode' => :'safe_mode',
        :'seed' => :'seed',
        :'steps' => :'steps',
        :'style_preset' => :'style_preset',
        :'width' => :'width'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cfg_scale' => :'Float',
        :'embed_exif_metadata' => :'Boolean',
        :'format' => :'String',
        :'height' => :'Integer',
        :'hide_watermark' => :'Boolean',
        :'inpaint' => :'Object',
        :'lora_strength' => :'Integer',
        :'model' => :'String',
        :'negative_prompt' => :'String',
        :'prompt' => :'String',
        :'return_binary' => :'Boolean',
        :'variants' => :'Integer',
        :'safe_mode' => :'Boolean',
        :'seed' => :'Integer',
        :'steps' => :'Integer',
        :'style_preset' => :'String',
        :'width' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'inpaint',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VeniceClient::GenerateImageRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VeniceClient::GenerateImageRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cfg_scale')
        self.cfg_scale = attributes[:'cfg_scale']
      end

      if attributes.key?(:'embed_exif_metadata')
        self.embed_exif_metadata = attributes[:'embed_exif_metadata']
      else
        self.embed_exif_metadata = false
      end

      if attributes.key?(:'format')
        self.format = attributes[:'format']
      else
        self.format = 'webp'
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      else
        self.height = 1024
      end

      if attributes.key?(:'hide_watermark')
        self.hide_watermark = attributes[:'hide_watermark']
      else
        self.hide_watermark = false
      end

      if attributes.key?(:'inpaint')
        self.inpaint = attributes[:'inpaint']
      end

      if attributes.key?(:'lora_strength')
        self.lora_strength = attributes[:'lora_strength']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      else
        self.model = nil
      end

      if attributes.key?(:'negative_prompt')
        self.negative_prompt = attributes[:'negative_prompt']
      end

      if attributes.key?(:'prompt')
        self.prompt = attributes[:'prompt']
      else
        self.prompt = nil
      end

      if attributes.key?(:'return_binary')
        self.return_binary = attributes[:'return_binary']
      else
        self.return_binary = false
      end

      if attributes.key?(:'variants')
        self.variants = attributes[:'variants']
      end

      if attributes.key?(:'safe_mode')
        self.safe_mode = attributes[:'safe_mode']
      else
        self.safe_mode = true
      end

      if attributes.key?(:'seed')
        self.seed = attributes[:'seed']
      else
        self.seed = 0
      end

      if attributes.key?(:'steps')
        self.steps = attributes[:'steps']
      else
        self.steps = 20
      end

      if attributes.key?(:'style_preset')
        self.style_preset = attributes[:'style_preset']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      else
        self.width = 1024
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@cfg_scale.nil? && @cfg_scale > 20
        invalid_properties.push('invalid value for "cfg_scale", must be smaller than or equal to 20.')
      end

      if !@cfg_scale.nil? && @cfg_scale <= 0
        invalid_properties.push('invalid value for "cfg_scale", must be greater than 0.')
      end

      if !@height.nil? && @height > 1280
        invalid_properties.push('invalid value for "height", must be smaller than or equal to 1280.')
      end

      if !@height.nil? && @height <= 0
        invalid_properties.push('invalid value for "height", must be greater than 0.')
      end

      if !@lora_strength.nil? && @lora_strength > 100
        invalid_properties.push('invalid value for "lora_strength", must be smaller than or equal to 100.')
      end

      if !@lora_strength.nil? && @lora_strength < 0
        invalid_properties.push('invalid value for "lora_strength", must be greater than or equal to 0.')
      end

      if @model.nil?
        invalid_properties.push('invalid value for "model", model cannot be nil.')
      end

      if !@negative_prompt.nil? && @negative_prompt.to_s.length > 1500
        invalid_properties.push('invalid value for "negative_prompt", the character length must be smaller than or equal to 1500.')
      end

      if @prompt.nil?
        invalid_properties.push('invalid value for "prompt", prompt cannot be nil.')
      end

      if @prompt.to_s.length > 1500
        invalid_properties.push('invalid value for "prompt", the character length must be smaller than or equal to 1500.')
      end

      if @prompt.to_s.length < 1
        invalid_properties.push('invalid value for "prompt", the character length must be greater than or equal to 1.')
      end

      if !@variants.nil? && @variants > 4
        invalid_properties.push('invalid value for "variants", must be smaller than or equal to 4.')
      end

      if !@variants.nil? && @variants < 1
        invalid_properties.push('invalid value for "variants", must be greater than or equal to 1.')
      end

      if !@seed.nil? && @seed > 999999999
        invalid_properties.push('invalid value for "seed", must be smaller than or equal to 999999999.')
      end

      if !@seed.nil? && @seed < -999999999
        invalid_properties.push('invalid value for "seed", must be greater than or equal to -999999999.')
      end

      if !@steps.nil? && @steps > 50
        invalid_properties.push('invalid value for "steps", must be smaller than or equal to 50.')
      end

      if !@steps.nil? && @steps <= 0
        invalid_properties.push('invalid value for "steps", must be greater than 0.')
      end

      if !@width.nil? && @width > 1280
        invalid_properties.push('invalid value for "width", must be smaller than or equal to 1280.')
      end

      if !@width.nil? && @width <= 0
        invalid_properties.push('invalid value for "width", must be greater than 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@cfg_scale.nil? && @cfg_scale > 20
      return false if !@cfg_scale.nil? && @cfg_scale <= 0
      format_validator = EnumAttributeValidator.new('String', ["jpeg", "png", "webp"])
      return false unless format_validator.valid?(@format)
      return false if !@height.nil? && @height > 1280
      return false if !@height.nil? && @height <= 0
      return false if !@lora_strength.nil? && @lora_strength > 100
      return false if !@lora_strength.nil? && @lora_strength < 0
      return false if @model.nil?
      return false if !@negative_prompt.nil? && @negative_prompt.to_s.length > 1500
      return false if @prompt.nil?
      return false if @prompt.to_s.length > 1500
      return false if @prompt.to_s.length < 1
      return false if !@variants.nil? && @variants > 4
      return false if !@variants.nil? && @variants < 1
      return false if !@seed.nil? && @seed > 999999999
      return false if !@seed.nil? && @seed < -999999999
      return false if !@steps.nil? && @steps > 50
      return false if !@steps.nil? && @steps <= 0
      return false if !@width.nil? && @width > 1280
      return false if !@width.nil? && @width <= 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cfg_scale Value to be assigned
    def cfg_scale=(cfg_scale)
      if cfg_scale.nil?
        fail ArgumentError, 'cfg_scale cannot be nil'
      end

      if cfg_scale > 20
        fail ArgumentError, 'invalid value for "cfg_scale", must be smaller than or equal to 20.'
      end

      if cfg_scale <= 0
        fail ArgumentError, 'invalid value for "cfg_scale", must be greater than 0.'
      end

      @cfg_scale = cfg_scale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] format Object to be assigned
    def format=(format)
      validator = EnumAttributeValidator.new('String', ["jpeg", "png", "webp"])
      unless validator.valid?(format)
        fail ArgumentError, "invalid value for \"format\", must be one of #{validator.allowable_values}."
      end
      @format = format
    end

    # Custom attribute writer method with validation
    # @param [Object] height Value to be assigned
    def height=(height)
      if height.nil?
        fail ArgumentError, 'height cannot be nil'
      end

      if height > 1280
        fail ArgumentError, 'invalid value for "height", must be smaller than or equal to 1280.'
      end

      if height <= 0
        fail ArgumentError, 'invalid value for "height", must be greater than 0.'
      end

      @height = height
    end

    # Custom attribute writer method with validation
    # @param [Object] lora_strength Value to be assigned
    def lora_strength=(lora_strength)
      if lora_strength.nil?
        fail ArgumentError, 'lora_strength cannot be nil'
      end

      if lora_strength > 100
        fail ArgumentError, 'invalid value for "lora_strength", must be smaller than or equal to 100.'
      end

      if lora_strength < 0
        fail ArgumentError, 'invalid value for "lora_strength", must be greater than or equal to 0.'
      end

      @lora_strength = lora_strength
    end

    # Custom attribute writer method with validation
    # @param [Object] model Value to be assigned
    def model=(model)
      if model.nil?
        fail ArgumentError, 'model cannot be nil'
      end

      @model = model
    end

    # Custom attribute writer method with validation
    # @param [Object] negative_prompt Value to be assigned
    def negative_prompt=(negative_prompt)
      if negative_prompt.nil?
        fail ArgumentError, 'negative_prompt cannot be nil'
      end

      if negative_prompt.to_s.length > 1500
        fail ArgumentError, 'invalid value for "negative_prompt", the character length must be smaller than or equal to 1500.'
      end

      @negative_prompt = negative_prompt
    end

    # Custom attribute writer method with validation
    # @param [Object] prompt Value to be assigned
    def prompt=(prompt)
      if prompt.nil?
        fail ArgumentError, 'prompt cannot be nil'
      end

      if prompt.to_s.length > 1500
        fail ArgumentError, 'invalid value for "prompt", the character length must be smaller than or equal to 1500.'
      end

      if prompt.to_s.length < 1
        fail ArgumentError, 'invalid value for "prompt", the character length must be greater than or equal to 1.'
      end

      @prompt = prompt
    end

    # Custom attribute writer method with validation
    # @param [Object] variants Value to be assigned
    def variants=(variants)
      if variants.nil?
        fail ArgumentError, 'variants cannot be nil'
      end

      if variants > 4
        fail ArgumentError, 'invalid value for "variants", must be smaller than or equal to 4.'
      end

      if variants < 1
        fail ArgumentError, 'invalid value for "variants", must be greater than or equal to 1.'
      end

      @variants = variants
    end

    # Custom attribute writer method with validation
    # @param [Object] seed Value to be assigned
    def seed=(seed)
      if seed.nil?
        fail ArgumentError, 'seed cannot be nil'
      end

      if seed > 999999999
        fail ArgumentError, 'invalid value for "seed", must be smaller than or equal to 999999999.'
      end

      if seed < -999999999
        fail ArgumentError, 'invalid value for "seed", must be greater than or equal to -999999999.'
      end

      @seed = seed
    end

    # Custom attribute writer method with validation
    # @param [Object] steps Value to be assigned
    def steps=(steps)
      if steps.nil?
        fail ArgumentError, 'steps cannot be nil'
      end

      if steps > 50
        fail ArgumentError, 'invalid value for "steps", must be smaller than or equal to 50.'
      end

      if steps <= 0
        fail ArgumentError, 'invalid value for "steps", must be greater than 0.'
      end

      @steps = steps
    end

    # Custom attribute writer method with validation
    # @param [Object] width Value to be assigned
    def width=(width)
      if width.nil?
        fail ArgumentError, 'width cannot be nil'
      end

      if width > 1280
        fail ArgumentError, 'invalid value for "width", must be smaller than or equal to 1280.'
      end

      if width <= 0
        fail ArgumentError, 'invalid value for "width", must be greater than 0.'
      end

      @width = width
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cfg_scale == o.cfg_scale &&
          embed_exif_metadata == o.embed_exif_metadata &&
          format == o.format &&
          height == o.height &&
          hide_watermark == o.hide_watermark &&
          inpaint == o.inpaint &&
          lora_strength == o.lora_strength &&
          model == o.model &&
          negative_prompt == o.negative_prompt &&
          prompt == o.prompt &&
          return_binary == o.return_binary &&
          variants == o.variants &&
          safe_mode == o.safe_mode &&
          seed == o.seed &&
          steps == o.steps &&
          style_preset == o.style_preset &&
          width == o.width
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cfg_scale, embed_exif_metadata, format, height, hide_watermark, inpaint, lora_strength, model, negative_prompt, prompt, return_binary, variants, safe_mode, seed, steps, style_preset, width].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VeniceClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
