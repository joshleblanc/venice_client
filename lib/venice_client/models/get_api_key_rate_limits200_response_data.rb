=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250709.013306

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module VeniceClient
  class GetApiKeyRateLimits200ResponseData
    # Does the API key have access to consume the inference APIs?
    attr_accessor :access_permitted

    attr_accessor :api_tier

    attr_accessor :balances

    # The timestamp the API key expires. If null, the key never expires.
    attr_accessor :key_expiration

    # The timestamp when the next epoch begins. This is relevant for rate limits that reset at the start of each epoch.
    attr_accessor :next_epoch_begins

    attr_accessor :rate_limits

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_permitted' => :'accessPermitted',
        :'api_tier' => :'apiTier',
        :'balances' => :'balances',
        :'key_expiration' => :'keyExpiration',
        :'next_epoch_begins' => :'nextEpochBegins',
        :'rate_limits' => :'rateLimits'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access_permitted' => :'Boolean',
        :'api_tier' => :'GetApiKeyRateLimits200ResponseDataApiTier',
        :'balances' => :'GetApiKeyRateLimits200ResponseDataBalances',
        :'key_expiration' => :'String',
        :'next_epoch_begins' => :'String',
        :'rate_limits' => :'Array<GetApiKeyRateLimits200ResponseDataRateLimitsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'key_expiration',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VeniceClient::GetApiKeyRateLimits200ResponseData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VeniceClient::GetApiKeyRateLimits200ResponseData`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access_permitted')
        self.access_permitted = attributes[:'access_permitted']
      else
        self.access_permitted = nil
      end

      if attributes.key?(:'api_tier')
        self.api_tier = attributes[:'api_tier']
      else
        self.api_tier = nil
      end

      if attributes.key?(:'balances')
        self.balances = attributes[:'balances']
      else
        self.balances = nil
      end

      if attributes.key?(:'key_expiration')
        self.key_expiration = attributes[:'key_expiration']
      else
        self.key_expiration = nil
      end

      if attributes.key?(:'next_epoch_begins')
        self.next_epoch_begins = attributes[:'next_epoch_begins']
      else
        self.next_epoch_begins = nil
      end

      if attributes.key?(:'rate_limits')
        if (value = attributes[:'rate_limits']).is_a?(Array)
          self.rate_limits = value
        end
      else
        self.rate_limits = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @access_permitted.nil?
        invalid_properties.push('invalid value for "access_permitted", access_permitted cannot be nil.')
      end

      if @api_tier.nil?
        invalid_properties.push('invalid value for "api_tier", api_tier cannot be nil.')
      end

      if @balances.nil?
        invalid_properties.push('invalid value for "balances", balances cannot be nil.')
      end

      if @next_epoch_begins.nil?
        invalid_properties.push('invalid value for "next_epoch_begins", next_epoch_begins cannot be nil.')
      end

      if @rate_limits.nil?
        invalid_properties.push('invalid value for "rate_limits", rate_limits cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @access_permitted.nil?
      return false if @api_tier.nil?
      return false if @balances.nil?
      return false if @next_epoch_begins.nil?
      return false if @rate_limits.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] access_permitted Value to be assigned
    def access_permitted=(access_permitted)
      if access_permitted.nil?
        fail ArgumentError, 'access_permitted cannot be nil'
      end

      @access_permitted = access_permitted
    end

    # Custom attribute writer method with validation
    # @param [Object] api_tier Value to be assigned
    def api_tier=(api_tier)
      if api_tier.nil?
        fail ArgumentError, 'api_tier cannot be nil'
      end

      @api_tier = api_tier
    end

    # Custom attribute writer method with validation
    # @param [Object] balances Value to be assigned
    def balances=(balances)
      if balances.nil?
        fail ArgumentError, 'balances cannot be nil'
      end

      @balances = balances
    end

    # Custom attribute writer method with validation
    # @param [Object] next_epoch_begins Value to be assigned
    def next_epoch_begins=(next_epoch_begins)
      if next_epoch_begins.nil?
        fail ArgumentError, 'next_epoch_begins cannot be nil'
      end

      @next_epoch_begins = next_epoch_begins
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_limits Value to be assigned
    def rate_limits=(rate_limits)
      if rate_limits.nil?
        fail ArgumentError, 'rate_limits cannot be nil'
      end

      @rate_limits = rate_limits
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_permitted == o.access_permitted &&
          api_tier == o.api_tier &&
          balances == o.balances &&
          key_expiration == o.key_expiration &&
          next_epoch_begins == o.next_epoch_begins &&
          rate_limits == o.rate_limits
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access_permitted, api_tier, balances, key_expiration, next_epoch_begins, rate_limits].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VeniceClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
