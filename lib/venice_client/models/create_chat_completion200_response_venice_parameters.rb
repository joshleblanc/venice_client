=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250918.173746

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module VeniceClient
  # Unique parameters to Venice's API implementation.
  class CreateChatCompletion200ResponseVeniceParameters
    # Did the request enable web search?
    attr_accessor :enable_web_search

    # Did the request enable web citations?
    attr_accessor :enable_web_citations

    # Did the request include the Venice system prompt?
    attr_accessor :include_venice_system_prompt

    # Did the request include search results in the stream?
    attr_accessor :include_search_results_in_stream

    # Did the request also return search results as a tool-call documents block?
    attr_accessor :return_search_results_as_documents

    # The character slug of a public Venice character.
    attr_accessor :character_slug

    # Did the request strip thinking response?
    attr_accessor :strip_thinking_response

    # Did the request disable thinking?
    attr_accessor :disable_thinking

    # Citations from web search results.
    attr_accessor :web_search_citations

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enable_web_search' => :'enable_web_search',
        :'enable_web_citations' => :'enable_web_citations',
        :'include_venice_system_prompt' => :'include_venice_system_prompt',
        :'include_search_results_in_stream' => :'include_search_results_in_stream',
        :'return_search_results_as_documents' => :'return_search_results_as_documents',
        :'character_slug' => :'character_slug',
        :'strip_thinking_response' => :'strip_thinking_response',
        :'disable_thinking' => :'disable_thinking',
        :'web_search_citations' => :'web_search_citations'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'enable_web_search' => :'String',
        :'enable_web_citations' => :'Boolean',
        :'include_venice_system_prompt' => :'Boolean',
        :'include_search_results_in_stream' => :'Boolean',
        :'return_search_results_as_documents' => :'Boolean',
        :'character_slug' => :'String',
        :'strip_thinking_response' => :'Boolean',
        :'disable_thinking' => :'Boolean',
        :'web_search_citations' => :'Array<CreateChatCompletion200ResponseVeniceParametersWebSearchCitationsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VeniceClient::CreateChatCompletion200ResponseVeniceParameters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VeniceClient::CreateChatCompletion200ResponseVeniceParameters`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'enable_web_search')
        self.enable_web_search = attributes[:'enable_web_search']
      else
        self.enable_web_search = nil
      end

      if attributes.key?(:'enable_web_citations')
        self.enable_web_citations = attributes[:'enable_web_citations']
      else
        self.enable_web_citations = nil
      end

      if attributes.key?(:'include_venice_system_prompt')
        self.include_venice_system_prompt = attributes[:'include_venice_system_prompt']
      else
        self.include_venice_system_prompt = nil
      end

      if attributes.key?(:'include_search_results_in_stream')
        self.include_search_results_in_stream = attributes[:'include_search_results_in_stream']
      else
        self.include_search_results_in_stream = nil
      end

      if attributes.key?(:'return_search_results_as_documents')
        self.return_search_results_as_documents = attributes[:'return_search_results_as_documents']
      else
        self.return_search_results_as_documents = nil
      end

      if attributes.key?(:'character_slug')
        self.character_slug = attributes[:'character_slug']
      end

      if attributes.key?(:'strip_thinking_response')
        self.strip_thinking_response = attributes[:'strip_thinking_response']
      else
        self.strip_thinking_response = nil
      end

      if attributes.key?(:'disable_thinking')
        self.disable_thinking = attributes[:'disable_thinking']
      else
        self.disable_thinking = nil
      end

      if attributes.key?(:'web_search_citations')
        if (value = attributes[:'web_search_citations']).is_a?(Array)
          self.web_search_citations = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @enable_web_search.nil?
        invalid_properties.push('invalid value for "enable_web_search", enable_web_search cannot be nil.')
      end

      if @enable_web_citations.nil?
        invalid_properties.push('invalid value for "enable_web_citations", enable_web_citations cannot be nil.')
      end

      if @include_venice_system_prompt.nil?
        invalid_properties.push('invalid value for "include_venice_system_prompt", include_venice_system_prompt cannot be nil.')
      end

      if @include_search_results_in_stream.nil?
        invalid_properties.push('invalid value for "include_search_results_in_stream", include_search_results_in_stream cannot be nil.')
      end

      if @return_search_results_as_documents.nil?
        invalid_properties.push('invalid value for "return_search_results_as_documents", return_search_results_as_documents cannot be nil.')
      end

      if @strip_thinking_response.nil?
        invalid_properties.push('invalid value for "strip_thinking_response", strip_thinking_response cannot be nil.')
      end

      if @disable_thinking.nil?
        invalid_properties.push('invalid value for "disable_thinking", disable_thinking cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @enable_web_search.nil?
      enable_web_search_validator = EnumAttributeValidator.new('String', ["auto", "false", "true"])
      return false unless enable_web_search_validator.valid?(@enable_web_search)
      return false if @enable_web_citations.nil?
      return false if @include_venice_system_prompt.nil?
      return false if @include_search_results_in_stream.nil?
      return false if @return_search_results_as_documents.nil?
      return false if @strip_thinking_response.nil?
      return false if @disable_thinking.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_web_search Object to be assigned
    def enable_web_search=(enable_web_search)
      validator = EnumAttributeValidator.new('String', ["auto", "false", "true"])
      unless validator.valid?(enable_web_search)
        fail ArgumentError, "invalid value for \"enable_web_search\", must be one of #{validator.allowable_values}."
      end
      @enable_web_search = enable_web_search
    end

    # Custom attribute writer method with validation
    # @param [Object] enable_web_citations Value to be assigned
    def enable_web_citations=(enable_web_citations)
      if enable_web_citations.nil?
        fail ArgumentError, 'enable_web_citations cannot be nil'
      end

      @enable_web_citations = enable_web_citations
    end

    # Custom attribute writer method with validation
    # @param [Object] include_venice_system_prompt Value to be assigned
    def include_venice_system_prompt=(include_venice_system_prompt)
      if include_venice_system_prompt.nil?
        fail ArgumentError, 'include_venice_system_prompt cannot be nil'
      end

      @include_venice_system_prompt = include_venice_system_prompt
    end

    # Custom attribute writer method with validation
    # @param [Object] include_search_results_in_stream Value to be assigned
    def include_search_results_in_stream=(include_search_results_in_stream)
      if include_search_results_in_stream.nil?
        fail ArgumentError, 'include_search_results_in_stream cannot be nil'
      end

      @include_search_results_in_stream = include_search_results_in_stream
    end

    # Custom attribute writer method with validation
    # @param [Object] return_search_results_as_documents Value to be assigned
    def return_search_results_as_documents=(return_search_results_as_documents)
      if return_search_results_as_documents.nil?
        fail ArgumentError, 'return_search_results_as_documents cannot be nil'
      end

      @return_search_results_as_documents = return_search_results_as_documents
    end

    # Custom attribute writer method with validation
    # @param [Object] strip_thinking_response Value to be assigned
    def strip_thinking_response=(strip_thinking_response)
      if strip_thinking_response.nil?
        fail ArgumentError, 'strip_thinking_response cannot be nil'
      end

      @strip_thinking_response = strip_thinking_response
    end

    # Custom attribute writer method with validation
    # @param [Object] disable_thinking Value to be assigned
    def disable_thinking=(disable_thinking)
      if disable_thinking.nil?
        fail ArgumentError, 'disable_thinking cannot be nil'
      end

      @disable_thinking = disable_thinking
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enable_web_search == o.enable_web_search &&
          enable_web_citations == o.enable_web_citations &&
          include_venice_system_prompt == o.include_venice_system_prompt &&
          include_search_results_in_stream == o.include_search_results_in_stream &&
          return_search_results_as_documents == o.return_search_results_as_documents &&
          character_slug == o.character_slug &&
          strip_thinking_response == o.strip_thinking_response &&
          disable_thinking == o.disable_thinking &&
          web_search_citations == o.web_search_citations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [enable_web_search, enable_web_citations, include_venice_system_prompt, include_search_results_in_stream, return_search_results_as_documents, character_slug, strip_thinking_response, disable_thinking, web_search_citations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VeniceClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
