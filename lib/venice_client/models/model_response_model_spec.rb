=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250918.173746

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module VeniceClient
  class ModelResponseModelSpec
    # The context length supported by the model. Only applicable for text models.
    attr_accessor :available_context_tokens

    # Is this model in beta?
    attr_accessor :beta

    attr_accessor :capabilities

    attr_accessor :constraints

    # The name of the model.
    attr_accessor :name

    # The source of the model, such as a URL to the model repository.
    attr_accessor :model_source

    # Is this model presently offline?
    attr_accessor :offline

    attr_accessor :pricing

    # Traits that apply to this model. You can specify a trait to auto-select a model vs. specifying the model ID in your request to avoid breakage as Venice updates and iterates on its models.
    attr_accessor :traits

    # The voices available for this TTS model. Only applicable for TTS models.
    attr_accessor :voices

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'available_context_tokens' => :'availableContextTokens',
        :'beta' => :'beta',
        :'capabilities' => :'capabilities',
        :'constraints' => :'constraints',
        :'name' => :'name',
        :'model_source' => :'modelSource',
        :'offline' => :'offline',
        :'pricing' => :'pricing',
        :'traits' => :'traits',
        :'voices' => :'voices'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'available_context_tokens' => :'Float',
        :'beta' => :'Boolean',
        :'capabilities' => :'ModelResponseModelSpecCapabilities',
        :'constraints' => :'ModelResponseModelSpecConstraints',
        :'name' => :'String',
        :'model_source' => :'String',
        :'offline' => :'Boolean',
        :'pricing' => :'ModelResponseModelSpecPricing',
        :'traits' => :'Array<String>',
        :'voices' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VeniceClient::ModelResponseModelSpec` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VeniceClient::ModelResponseModelSpec`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'available_context_tokens')
        self.available_context_tokens = attributes[:'available_context_tokens']
      end

      if attributes.key?(:'beta')
        self.beta = attributes[:'beta']
      end

      if attributes.key?(:'capabilities')
        self.capabilities = attributes[:'capabilities']
      end

      if attributes.key?(:'constraints')
        self.constraints = attributes[:'constraints']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'model_source')
        self.model_source = attributes[:'model_source']
      end

      if attributes.key?(:'offline')
        self.offline = attributes[:'offline']
      else
        self.offline = false
      end

      if attributes.key?(:'pricing')
        self.pricing = attributes[:'pricing']
      end

      if attributes.key?(:'traits')
        if (value = attributes[:'traits']).is_a?(Array)
          self.traits = value
        end
      end

      if attributes.key?(:'voices')
        if (value = attributes[:'voices']).is_a?(Array)
          self.voices = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          available_context_tokens == o.available_context_tokens &&
          beta == o.beta &&
          capabilities == o.capabilities &&
          constraints == o.constraints &&
          name == o.name &&
          model_source == o.model_source &&
          offline == o.offline &&
          pricing == o.pricing &&
          traits == o.traits &&
          voices == o.voices
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [available_context_tokens, beta, capabilities, constraints, name, model_source, offline, pricing, traits, voices].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VeniceClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
