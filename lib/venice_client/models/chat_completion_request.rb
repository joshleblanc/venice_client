=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250709.013306

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module VeniceClient
  class ChatCompletionRequest
    # Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    attr_accessor :frequency_penalty

    # Whether to include log probabilities in the response. This is not supported by all models.
    attr_accessor :logprobs

    # The number of highest probability tokens to return for each token position.
    attr_accessor :top_logprobs

    # An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
    attr_accessor :max_completion_tokens

    # Maximum temperature value for dynamic temperature scaling.
    attr_accessor :max_temp

    # The maximum number of tokens that can be generated in the chat completion. This value can be used to control costs for text generated via API. This value is now deprecated in favor of max_completion_tokens.
    attr_accessor :max_tokens

    # A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text and images. For compatibility purposes, the schema supports submitting multiple image_url messages, however, only the last image_url message will be passed to and processed by the model.
    attr_accessor :messages

    # Sets a minimum probability threshold for token selection. Tokens with probabilities below this value are filtered out.
    attr_accessor :min_p

    # Minimum temperature value for dynamic temperature scaling.
    attr_accessor :min_temp

    # The ID of the model you wish to prompt. May also be a model trait, or a model compatibility mapping. See the models endpoint for a list of models available to you. You can use feature suffixes to enable features from the venice_parameters object. Please see \"Model Feature Suffix\" documentation for more details.
    attr_accessor :model

    # How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
    attr_accessor :n

    # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    attr_accessor :presence_penalty

    # The parameter for repetition penalty. 1.0 means no penalty. Values > 1.0 discourage repetition.
    attr_accessor :repetition_penalty

    # The random seed used to generate the response. This is useful for reproducibility.
    attr_accessor :seed

    attr_accessor :stop

    # Array of token IDs where the API will stop generating further tokens.
    attr_accessor :stop_token_ids

    # Whether to stream back partial progress. Defaults to false.
    attr_accessor :stream

    attr_accessor :stream_options

    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
    attr_accessor :temperature

    # The number of highest probability vocabulary tokens to keep for top-k-filtering.
    attr_accessor :top_k

    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    attr_accessor :top_p

    # This field is discarded on the request but is supported in the Venice API for compatibility with OpenAI clients.
    attr_accessor :user

    attr_accessor :venice_parameters

    # Whether to enable parallel function calling during tool use.
    attr_accessor :parallel_tool_calls

    attr_accessor :response_format

    attr_accessor :tool_choice

    # A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
    attr_accessor :tools

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'frequency_penalty' => :'frequency_penalty',
        :'logprobs' => :'logprobs',
        :'top_logprobs' => :'top_logprobs',
        :'max_completion_tokens' => :'max_completion_tokens',
        :'max_temp' => :'max_temp',
        :'max_tokens' => :'max_tokens',
        :'messages' => :'messages',
        :'min_p' => :'min_p',
        :'min_temp' => :'min_temp',
        :'model' => :'model',
        :'n' => :'n',
        :'presence_penalty' => :'presence_penalty',
        :'repetition_penalty' => :'repetition_penalty',
        :'seed' => :'seed',
        :'stop' => :'stop',
        :'stop_token_ids' => :'stop_token_ids',
        :'stream' => :'stream',
        :'stream_options' => :'stream_options',
        :'temperature' => :'temperature',
        :'top_k' => :'top_k',
        :'top_p' => :'top_p',
        :'user' => :'user',
        :'venice_parameters' => :'venice_parameters',
        :'parallel_tool_calls' => :'parallel_tool_calls',
        :'response_format' => :'response_format',
        :'tool_choice' => :'tool_choice',
        :'tools' => :'tools'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'frequency_penalty' => :'Float',
        :'logprobs' => :'Boolean',
        :'top_logprobs' => :'Integer',
        :'max_completion_tokens' => :'Integer',
        :'max_temp' => :'Float',
        :'max_tokens' => :'Integer',
        :'messages' => :'Array<ChatCompletionRequestMessagesInner>',
        :'min_p' => :'Float',
        :'min_temp' => :'Float',
        :'model' => :'String',
        :'n' => :'Integer',
        :'presence_penalty' => :'Float',
        :'repetition_penalty' => :'Float',
        :'seed' => :'Integer',
        :'stop' => :'ChatCompletionRequestStop',
        :'stop_token_ids' => :'Array<Float>',
        :'stream' => :'Boolean',
        :'stream_options' => :'ChatCompletionRequestStreamOptions',
        :'temperature' => :'Float',
        :'top_k' => :'Integer',
        :'top_p' => :'Float',
        :'user' => :'String',
        :'venice_parameters' => :'ChatCompletionRequestVeniceParameters',
        :'parallel_tool_calls' => :'Boolean',
        :'response_format' => :'ChatCompletionRequestResponseFormat',
        :'tool_choice' => :'ChatCompletionRequestToolChoice',
        :'tools' => :'Array<ToolCall>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'stop',
        :'tools'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VeniceClient::ChatCompletionRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VeniceClient::ChatCompletionRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'frequency_penalty')
        self.frequency_penalty = attributes[:'frequency_penalty']
      else
        self.frequency_penalty = 0
      end

      if attributes.key?(:'logprobs')
        self.logprobs = attributes[:'logprobs']
      end

      if attributes.key?(:'top_logprobs')
        self.top_logprobs = attributes[:'top_logprobs']
      end

      if attributes.key?(:'max_completion_tokens')
        self.max_completion_tokens = attributes[:'max_completion_tokens']
      end

      if attributes.key?(:'max_temp')
        self.max_temp = attributes[:'max_temp']
      end

      if attributes.key?(:'max_tokens')
        self.max_tokens = attributes[:'max_tokens']
      end

      if attributes.key?(:'messages')
        if (value = attributes[:'messages']).is_a?(Array)
          self.messages = value
        end
      else
        self.messages = nil
      end

      if attributes.key?(:'min_p')
        self.min_p = attributes[:'min_p']
      end

      if attributes.key?(:'min_temp')
        self.min_temp = attributes[:'min_temp']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      else
        self.model = nil
      end

      if attributes.key?(:'n')
        self.n = attributes[:'n']
      else
        self.n = 1
      end

      if attributes.key?(:'presence_penalty')
        self.presence_penalty = attributes[:'presence_penalty']
      else
        self.presence_penalty = 0
      end

      if attributes.key?(:'repetition_penalty')
        self.repetition_penalty = attributes[:'repetition_penalty']
      end

      if attributes.key?(:'seed')
        self.seed = attributes[:'seed']
      end

      if attributes.key?(:'stop')
        self.stop = attributes[:'stop']
      end

      if attributes.key?(:'stop_token_ids')
        if (value = attributes[:'stop_token_ids']).is_a?(Array)
          self.stop_token_ids = value
        end
      end

      if attributes.key?(:'stream')
        self.stream = attributes[:'stream']
      end

      if attributes.key?(:'stream_options')
        self.stream_options = attributes[:'stream_options']
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      else
        self.temperature = 0.7
      end

      if attributes.key?(:'top_k')
        self.top_k = attributes[:'top_k']
      end

      if attributes.key?(:'top_p')
        self.top_p = attributes[:'top_p']
      else
        self.top_p = 0.9
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'venice_parameters')
        self.venice_parameters = attributes[:'venice_parameters']
      end

      if attributes.key?(:'parallel_tool_calls')
        self.parallel_tool_calls = attributes[:'parallel_tool_calls']
      else
        self.parallel_tool_calls = true
      end

      if attributes.key?(:'response_format')
        self.response_format = attributes[:'response_format']
      end

      if attributes.key?(:'tool_choice')
        self.tool_choice = attributes[:'tool_choice']
      end

      if attributes.key?(:'tools')
        if (value = attributes[:'tools']).is_a?(Array)
          self.tools = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@frequency_penalty.nil? && @frequency_penalty > 2
        invalid_properties.push('invalid value for "frequency_penalty", must be smaller than or equal to 2.')
      end

      if !@frequency_penalty.nil? && @frequency_penalty < -2
        invalid_properties.push('invalid value for "frequency_penalty", must be greater than or equal to -2.')
      end

      if !@top_logprobs.nil? && @top_logprobs < 0
        invalid_properties.push('invalid value for "top_logprobs", must be greater than or equal to 0.')
      end

      if !@max_temp.nil? && @max_temp > 2
        invalid_properties.push('invalid value for "max_temp", must be smaller than or equal to 2.')
      end

      if !@max_temp.nil? && @max_temp < 0
        invalid_properties.push('invalid value for "max_temp", must be greater than or equal to 0.')
      end

      if @messages.nil?
        invalid_properties.push('invalid value for "messages", messages cannot be nil.')
      end

      if @messages.length < 1
        invalid_properties.push('invalid value for "messages", number of items must be greater than or equal to 1.')
      end

      if !@min_p.nil? && @min_p > 1
        invalid_properties.push('invalid value for "min_p", must be smaller than or equal to 1.')
      end

      if !@min_p.nil? && @min_p < 0
        invalid_properties.push('invalid value for "min_p", must be greater than or equal to 0.')
      end

      if !@min_temp.nil? && @min_temp > 2
        invalid_properties.push('invalid value for "min_temp", must be smaller than or equal to 2.')
      end

      if !@min_temp.nil? && @min_temp < 0
        invalid_properties.push('invalid value for "min_temp", must be greater than or equal to 0.')
      end

      if @model.nil?
        invalid_properties.push('invalid value for "model", model cannot be nil.')
      end

      if !@presence_penalty.nil? && @presence_penalty > 2
        invalid_properties.push('invalid value for "presence_penalty", must be smaller than or equal to 2.')
      end

      if !@presence_penalty.nil? && @presence_penalty < -2
        invalid_properties.push('invalid value for "presence_penalty", must be greater than or equal to -2.')
      end

      if !@repetition_penalty.nil? && @repetition_penalty < 0
        invalid_properties.push('invalid value for "repetition_penalty", must be greater than or equal to 0.')
      end

      if !@seed.nil? && @seed <= 0
        invalid_properties.push('invalid value for "seed", must be greater than 0.')
      end

      if !@temperature.nil? && @temperature > 2
        invalid_properties.push('invalid value for "temperature", must be smaller than or equal to 2.')
      end

      if !@temperature.nil? && @temperature < 0
        invalid_properties.push('invalid value for "temperature", must be greater than or equal to 0.')
      end

      if !@top_k.nil? && @top_k < 0
        invalid_properties.push('invalid value for "top_k", must be greater than or equal to 0.')
      end

      if !@top_p.nil? && @top_p > 1
        invalid_properties.push('invalid value for "top_p", must be smaller than or equal to 1.')
      end

      if !@top_p.nil? && @top_p < 0
        invalid_properties.push('invalid value for "top_p", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@frequency_penalty.nil? && @frequency_penalty > 2
      return false if !@frequency_penalty.nil? && @frequency_penalty < -2
      return false if !@top_logprobs.nil? && @top_logprobs < 0
      return false if !@max_temp.nil? && @max_temp > 2
      return false if !@max_temp.nil? && @max_temp < 0
      return false if @messages.nil?
      return false if @messages.length < 1
      return false if !@min_p.nil? && @min_p > 1
      return false if !@min_p.nil? && @min_p < 0
      return false if !@min_temp.nil? && @min_temp > 2
      return false if !@min_temp.nil? && @min_temp < 0
      return false if @model.nil?
      return false if !@presence_penalty.nil? && @presence_penalty > 2
      return false if !@presence_penalty.nil? && @presence_penalty < -2
      return false if !@repetition_penalty.nil? && @repetition_penalty < 0
      return false if !@seed.nil? && @seed <= 0
      return false if !@temperature.nil? && @temperature > 2
      return false if !@temperature.nil? && @temperature < 0
      return false if !@top_k.nil? && @top_k < 0
      return false if !@top_p.nil? && @top_p > 1
      return false if !@top_p.nil? && @top_p < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] frequency_penalty Value to be assigned
    def frequency_penalty=(frequency_penalty)
      if frequency_penalty.nil?
        fail ArgumentError, 'frequency_penalty cannot be nil'
      end

      if frequency_penalty > 2
        fail ArgumentError, 'invalid value for "frequency_penalty", must be smaller than or equal to 2.'
      end

      if frequency_penalty < -2
        fail ArgumentError, 'invalid value for "frequency_penalty", must be greater than or equal to -2.'
      end

      @frequency_penalty = frequency_penalty
    end

    # Custom attribute writer method with validation
    # @param [Object] top_logprobs Value to be assigned
    def top_logprobs=(top_logprobs)
      if top_logprobs.nil?
        fail ArgumentError, 'top_logprobs cannot be nil'
      end

      if top_logprobs < 0
        fail ArgumentError, 'invalid value for "top_logprobs", must be greater than or equal to 0.'
      end

      @top_logprobs = top_logprobs
    end

    # Custom attribute writer method with validation
    # @param [Object] max_temp Value to be assigned
    def max_temp=(max_temp)
      if max_temp.nil?
        fail ArgumentError, 'max_temp cannot be nil'
      end

      if max_temp > 2
        fail ArgumentError, 'invalid value for "max_temp", must be smaller than or equal to 2.'
      end

      if max_temp < 0
        fail ArgumentError, 'invalid value for "max_temp", must be greater than or equal to 0.'
      end

      @max_temp = max_temp
    end

    # Custom attribute writer method with validation
    # @param [Object] messages Value to be assigned
    def messages=(messages)
      if messages.nil?
        fail ArgumentError, 'messages cannot be nil'
      end

      if messages.length < 1
        fail ArgumentError, 'invalid value for "messages", number of items must be greater than or equal to 1.'
      end

      @messages = messages
    end

    # Custom attribute writer method with validation
    # @param [Object] min_p Value to be assigned
    def min_p=(min_p)
      if min_p.nil?
        fail ArgumentError, 'min_p cannot be nil'
      end

      if min_p > 1
        fail ArgumentError, 'invalid value for "min_p", must be smaller than or equal to 1.'
      end

      if min_p < 0
        fail ArgumentError, 'invalid value for "min_p", must be greater than or equal to 0.'
      end

      @min_p = min_p
    end

    # Custom attribute writer method with validation
    # @param [Object] min_temp Value to be assigned
    def min_temp=(min_temp)
      if min_temp.nil?
        fail ArgumentError, 'min_temp cannot be nil'
      end

      if min_temp > 2
        fail ArgumentError, 'invalid value for "min_temp", must be smaller than or equal to 2.'
      end

      if min_temp < 0
        fail ArgumentError, 'invalid value for "min_temp", must be greater than or equal to 0.'
      end

      @min_temp = min_temp
    end

    # Custom attribute writer method with validation
    # @param [Object] model Value to be assigned
    def model=(model)
      if model.nil?
        fail ArgumentError, 'model cannot be nil'
      end

      @model = model
    end

    # Custom attribute writer method with validation
    # @param [Object] presence_penalty Value to be assigned
    def presence_penalty=(presence_penalty)
      if presence_penalty.nil?
        fail ArgumentError, 'presence_penalty cannot be nil'
      end

      if presence_penalty > 2
        fail ArgumentError, 'invalid value for "presence_penalty", must be smaller than or equal to 2.'
      end

      if presence_penalty < -2
        fail ArgumentError, 'invalid value for "presence_penalty", must be greater than or equal to -2.'
      end

      @presence_penalty = presence_penalty
    end

    # Custom attribute writer method with validation
    # @param [Object] repetition_penalty Value to be assigned
    def repetition_penalty=(repetition_penalty)
      if repetition_penalty.nil?
        fail ArgumentError, 'repetition_penalty cannot be nil'
      end

      if repetition_penalty < 0
        fail ArgumentError, 'invalid value for "repetition_penalty", must be greater than or equal to 0.'
      end

      @repetition_penalty = repetition_penalty
    end

    # Custom attribute writer method with validation
    # @param [Object] seed Value to be assigned
    def seed=(seed)
      if seed.nil?
        fail ArgumentError, 'seed cannot be nil'
      end

      if seed <= 0
        fail ArgumentError, 'invalid value for "seed", must be greater than 0.'
      end

      @seed = seed
    end

    # Custom attribute writer method with validation
    # @param [Object] temperature Value to be assigned
    def temperature=(temperature)
      if temperature.nil?
        fail ArgumentError, 'temperature cannot be nil'
      end

      if temperature > 2
        fail ArgumentError, 'invalid value for "temperature", must be smaller than or equal to 2.'
      end

      if temperature < 0
        fail ArgumentError, 'invalid value for "temperature", must be greater than or equal to 0.'
      end

      @temperature = temperature
    end

    # Custom attribute writer method with validation
    # @param [Object] top_k Value to be assigned
    def top_k=(top_k)
      if top_k.nil?
        fail ArgumentError, 'top_k cannot be nil'
      end

      if top_k < 0
        fail ArgumentError, 'invalid value for "top_k", must be greater than or equal to 0.'
      end

      @top_k = top_k
    end

    # Custom attribute writer method with validation
    # @param [Object] top_p Value to be assigned
    def top_p=(top_p)
      if top_p.nil?
        fail ArgumentError, 'top_p cannot be nil'
      end

      if top_p > 1
        fail ArgumentError, 'invalid value for "top_p", must be smaller than or equal to 1.'
      end

      if top_p < 0
        fail ArgumentError, 'invalid value for "top_p", must be greater than or equal to 0.'
      end

      @top_p = top_p
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          frequency_penalty == o.frequency_penalty &&
          logprobs == o.logprobs &&
          top_logprobs == o.top_logprobs &&
          max_completion_tokens == o.max_completion_tokens &&
          max_temp == o.max_temp &&
          max_tokens == o.max_tokens &&
          messages == o.messages &&
          min_p == o.min_p &&
          min_temp == o.min_temp &&
          model == o.model &&
          n == o.n &&
          presence_penalty == o.presence_penalty &&
          repetition_penalty == o.repetition_penalty &&
          seed == o.seed &&
          stop == o.stop &&
          stop_token_ids == o.stop_token_ids &&
          stream == o.stream &&
          stream_options == o.stream_options &&
          temperature == o.temperature &&
          top_k == o.top_k &&
          top_p == o.top_p &&
          user == o.user &&
          venice_parameters == o.venice_parameters &&
          parallel_tool_calls == o.parallel_tool_calls &&
          response_format == o.response_format &&
          tool_choice == o.tool_choice &&
          tools == o.tools
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [frequency_penalty, logprobs, top_logprobs, max_completion_tokens, max_temp, max_tokens, messages, min_p, min_temp, model, n, presence_penalty, repetition_penalty, seed, stop, stop_token_ids, stream, stream_options, temperature, top_k, top_p, user, venice_parameters, parallel_tool_calls, response_format, tool_choice, tools].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VeniceClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
