=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250918.173746

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module VeniceClient
  class CharactersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /api/v1/characters/{slug}
    # This is a preview API and may change. Returns a single character by its slug.
    # @param slug [String] The slug of the character to retrieve
    # @param [Hash] opts the optional parameters
    # @return [GetCharacterBySlug200Response]
    def get_character_by_slug(slug, opts = {})
      data, _status_code, _headers = get_character_by_slug_with_http_info(slug, opts)
      data
    end

    # /api/v1/characters/{slug}
    # This is a preview API and may change. Returns a single character by its slug.
    # @param slug [String] The slug of the character to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCharacterBySlug200Response, Integer, Hash)>] GetCharacterBySlug200Response data, response status code and response headers
    def get_character_by_slug_with_http_info(slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CharactersApi.get_character_by_slug ...'
      end
      # verify the required parameter 'slug' is set
      if @api_client.config.client_side_validation && slug.nil?
        fail ArgumentError, "Missing the required parameter 'slug' when calling CharactersApi.get_character_by_slug"
      end
      # resource path
      local_var_path = '/characters/{slug}'.sub('{' + 'slug' + '}', CGI.escape(slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCharacterBySlug200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CharactersApi.get_character_by_slug",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CharactersApi#get_character_by_slug\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/characters
    # This is a preview API and may change. Returns a list of characters supported in the API.
    # @param [Hash] opts the optional parameters
    # @return [ListCharacters200Response]
    def list_characters(opts = {})
      data, _status_code, _headers = list_characters_with_http_info(opts)
      data
    end

    # /api/v1/characters
    # This is a preview API and may change. Returns a list of characters supported in the API.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCharacters200Response, Integer, Hash)>] ListCharacters200Response data, response status code and response headers
    def list_characters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CharactersApi.list_characters ...'
      end
      # resource path
      local_var_path = '/characters'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCharacters200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CharactersApi.list_characters",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CharactersApi#list_characters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
