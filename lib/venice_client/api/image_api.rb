=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250918.173746

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module VeniceClient
  class ImageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /api/v1/image/edit
    # Edit or modify an image based on the supplied prompt. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [EditImageRequest] :edit_image_request 
    # @return [File]
    def edit_image(opts = {})
      data, _status_code, _headers = edit_image_with_http_info(opts)
      data
    end

    # /api/v1/image/edit
    # Edit or modify an image based on the supplied prompt. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [EditImageRequest] :edit_image_request 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def edit_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.edit_image ...'
      end
      # resource path
      local_var_path = '/image/edit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'edit_image_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ImageApi.edit_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#edit_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/image/generate
    # Generate an image based on input parameters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br). Only applied when return_binary is false.
    # @option opts [GenerateImageRequest] :generate_image_request 
    # @return [GenerateImage200Response]
    def generate_image(opts = {})
      data, _status_code, _headers = generate_image_with_http_info(opts)
      data
    end

    # /api/v1/image/generate
    # Generate an image based on input parameters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br). Only applied when return_binary is false.
    # @option opts [GenerateImageRequest] :generate_image_request 
    # @return [Array<(GenerateImage200Response, Integer, Hash)>] GenerateImage200Response data, response status code and response headers
    def generate_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.generate_image ...'
      end
      # resource path
      local_var_path = '/image/generate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'image/jpeg', 'image/png', 'image/webp']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept-Encoding'] = opts[:'accept_encoding'] if !opts[:'accept_encoding'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'generate_image_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateImage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ImageApi.generate_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#generate_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/image/styles
    # List available image styles that can be used with the generate API.
    # @param [Hash] opts the optional parameters
    # @return [ImageStylesGet200Response]
    def image_styles_get(opts = {})
      data, _status_code, _headers = image_styles_get_with_http_info(opts)
      data
    end

    # /api/v1/image/styles
    # List available image styles that can be used with the generate API.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageStylesGet200Response, Integer, Hash)>] ImageStylesGet200Response data, response status code and response headers
    def image_styles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_styles_get ...'
      end
      # resource path
      local_var_path = '/image/styles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImageStylesGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ImageApi.image_styles_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_styles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/image/generations
    # Generate an image based on input parameters using an OpenAI compatible endpoint. This endpoint does not support the full feature set of the Venice Image Generation endpoint, but is compatible with the existing OpenAI endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br).
    # @option opts [SimpleGenerateImageRequest] :simple_generate_image_request 
    # @return [SimpleGenerateImage200Response]
    def simple_generate_image(opts = {})
      data, _status_code, _headers = simple_generate_image_with_http_info(opts)
      data
    end

    # /api/v1/image/generations
    # Generate an image based on input parameters using an OpenAI compatible endpoint. This endpoint does not support the full feature set of the Venice Image Generation endpoint, but is compatible with the existing OpenAI endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br).
    # @option opts [SimpleGenerateImageRequest] :simple_generate_image_request 
    # @return [Array<(SimpleGenerateImage200Response, Integer, Hash)>] SimpleGenerateImage200Response data, response status code and response headers
    def simple_generate_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.simple_generate_image ...'
      end
      # resource path
      local_var_path = '/images/generations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept-Encoding'] = opts[:'accept_encoding'] if !opts[:'accept_encoding'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'simple_generate_image_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SimpleGenerateImage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ImageApi.simple_generate_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#simple_generate_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/image/upscale
    # Upscale or enhance an image based on the supplied parameters. Using a scale of 1 with enhance enabled will only run the enhancer. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [UpscaleImageRequest] :upscale_image_request 
    # @return [File]
    def upscale_image(opts = {})
      data, _status_code, _headers = upscale_image_with_http_info(opts)
      data
    end

    # /api/v1/image/upscale
    # Upscale or enhance an image based on the supplied parameters. Using a scale of 1 with enhance enabled will only run the enhancer. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [UpscaleImageRequest] :upscale_image_request 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def upscale_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.upscale_image ...'
      end
      # resource path
      local_var_path = '/image/upscale'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'upscale_image_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ImageApi.upscale_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#upscale_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
