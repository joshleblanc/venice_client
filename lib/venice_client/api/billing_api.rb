=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250709.013306

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module VeniceClient
  class BillingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /api/v1/billing/usage
    # Get paginated billing usage data for the authenticated user. NOTE: This is a beta endpoint and may be subject to change.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Accept header to specify the response format
    # @option opts [String] :currency 
    # @option opts [Time] :end_date 
    # @option opts [Integer] :limit  (default to 200)
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :sort_order  (default to 'desc')
    # @option opts [Time] :start_date 
    # @return [GetBillingUsage200Response]
    def get_billing_usage(opts = {})
      data, _status_code, _headers = get_billing_usage_with_http_info(opts)
      data
    end

    # /api/v1/billing/usage
    # Get paginated billing usage data for the authenticated user. NOTE: This is a beta endpoint and may be subject to change.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Accept header to specify the response format
    # @option opts [String] :currency 
    # @option opts [Time] :end_date 
    # @option opts [Integer] :limit  (default to 200)
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :sort_order  (default to 'desc')
    # @option opts [Time] :start_date 
    # @return [Array<(GetBillingUsage200Response, Integer, Hash)>] GetBillingUsage200Response data, response status code and response headers
    def get_billing_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.get_billing_usage ...'
      end
      allowable_values = ["USD", "VCU", "DIEM"]
      if @api_client.config.client_side_validation && opts[:'currency'] && !allowable_values.include?(opts[:'currency'])
        fail ArgumentError, "invalid value for \"currency\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BillingApi.get_billing_usage, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] <= 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BillingApi.get_billing_usage, must be greater than 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] <= 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling BillingApi.get_billing_usage, must be greater than 0.'
      end

      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/billing/usage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv']) unless header_params['Accept']
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBillingUsage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"BillingApi.get_billing_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#get_billing_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
