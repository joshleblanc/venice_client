=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250918.173746

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module VeniceClient
  class APIKeysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /api/v1/api_keys
    # Create a new API key.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApiKeyRequest] :create_api_key_request 
    # @return [CreateApiKey200Response]
    def create_api_key(opts = {})
      data, _status_code, _headers = create_api_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys
    # Create a new API key.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApiKeyRequest] :create_api_key_request 
    # @return [Array<(CreateApiKey200Response, Integer, Hash)>] CreateApiKey200Response data, response status code and response headers
    def create_api_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.create_api_key ...'
      end
      # resource path
      local_var_path = '/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_api_key_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApiKey200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"APIKeysApi.create_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#create_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/api_keys
    # Delete an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the API key to delete
    # @return [DeleteApiKey200Response]
    def delete_api_key(opts = {})
      data, _status_code, _headers = delete_api_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys
    # Delete an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the API key to delete
    # @return [Array<(DeleteApiKey200Response, Integer, Hash)>] DeleteApiKey200Response data, response status code and response headers
    def delete_api_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.delete_api_key ...'
      end
      # resource path
      local_var_path = '/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteApiKey200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"APIKeysApi.delete_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#delete_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get API key details by ID
    # Return details about a specific API key, including rate limits and balance data.
    # @param id [String] The ID of the API key to retrieve
    # @param [Hash] opts the optional parameters
    # @return [GetApiKeyById200Response]
    def get_api_key_by_id(id, opts = {})
      data, _status_code, _headers = get_api_key_by_id_with_http_info(id, opts)
      data
    end

    # Get API key details by ID
    # Return details about a specific API key, including rate limits and balance data.
    # @param id [String] The ID of the API key to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiKeyById200Response, Integer, Hash)>] GetApiKeyById200Response data, response status code and response headers
    def get_api_key_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_key_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling APIKeysApi.get_api_key_by_id"
      end
      # resource path
      local_var_path = '/api_keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiKeyById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"APIKeysApi.get_api_key_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_key_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/api_keys/generate_web3_key
    # Returns the token required to generate an API key via a wallet.
    # @param [Hash] opts the optional parameters
    # @return [GetApiKeyGenerateWeb3Key200Response]
    def get_api_key_generate_web3_key(opts = {})
      data, _status_code, _headers = get_api_key_generate_web3_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/generate_web3_key
    # Returns the token required to generate an API key via a wallet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiKeyGenerateWeb3Key200Response, Integer, Hash)>] GetApiKeyGenerateWeb3Key200Response data, response status code and response headers
    def get_api_key_generate_web3_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_key_generate_web3_key ...'
      end
      # resource path
      local_var_path = '/api_keys/generate_web3_key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiKeyGenerateWeb3Key200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"APIKeysApi.get_api_key_generate_web3_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_key_generate_web3_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/api_keys/rate_limits/log
    # Returns the last 50 rate limits that the account exceeded.
    # @param [Hash] opts the optional parameters
    # @return [GetApiKeyRateLimitLogs200Response]
    def get_api_key_rate_limit_logs(opts = {})
      data, _status_code, _headers = get_api_key_rate_limit_logs_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/rate_limits/log
    # Returns the last 50 rate limits that the account exceeded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiKeyRateLimitLogs200Response, Integer, Hash)>] GetApiKeyRateLimitLogs200Response data, response status code and response headers
    def get_api_key_rate_limit_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_key_rate_limit_logs ...'
      end
      # resource path
      local_var_path = '/api_keys/rate_limits/log'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiKeyRateLimitLogs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"APIKeysApi.get_api_key_rate_limit_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_key_rate_limit_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/api_keys/rate_limits
    # Return details about user balances and rate limits.
    # @param [Hash] opts the optional parameters
    # @return [GetApiKeyRateLimits200Response]
    def get_api_key_rate_limits(opts = {})
      data, _status_code, _headers = get_api_key_rate_limits_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/rate_limits
    # Return details about user balances and rate limits.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiKeyRateLimits200Response, Integer, Hash)>] GetApiKeyRateLimits200Response data, response status code and response headers
    def get_api_key_rate_limits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_key_rate_limits ...'
      end
      # resource path
      local_var_path = '/api_keys/rate_limits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiKeyRateLimits200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"APIKeysApi.get_api_key_rate_limits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_key_rate_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/api_keys
    # Return a list of API keys.
    # @param [Hash] opts the optional parameters
    # @return [GetApiKeys200Response]
    def get_api_keys(opts = {})
      data, _status_code, _headers = get_api_keys_with_http_info(opts)
      data
    end

    # /api/v1/api_keys
    # Return a list of API keys.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiKeys200Response, Integer, Hash)>] GetApiKeys200Response data, response status code and response headers
    def get_api_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_keys ...'
      end
      # resource path
      local_var_path = '/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiKeys200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"APIKeysApi.get_api_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/api_keys/generate_web3_key
    # Authenticates a wallet holding sVVV and creates an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [PostApiKeyGenerateWeb3KeyRequest] :post_api_key_generate_web3_key_request 
    # @return [CreateApiKey200Response]
    def post_api_key_generate_web3_key(opts = {})
      data, _status_code, _headers = post_api_key_generate_web3_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/generate_web3_key
    # Authenticates a wallet holding sVVV and creates an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [PostApiKeyGenerateWeb3KeyRequest] :post_api_key_generate_web3_key_request 
    # @return [Array<(CreateApiKey200Response, Integer, Hash)>] CreateApiKey200Response data, response status code and response headers
    def post_api_key_generate_web3_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.post_api_key_generate_web3_key ...'
      end
      # resource path
      local_var_path = '/api_keys/generate_web3_key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_api_key_generate_web3_key_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApiKey200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"APIKeysApi.post_api_key_generate_web3_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#post_api_key_generate_web3_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
