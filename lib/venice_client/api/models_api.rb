=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250918.173746

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module VeniceClient
  class ModelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /api/v1/models/compatibility_mapping
    # Returns a list of model compatibility mappings and the associated model.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type  (default to 'text')
    # @return [ListModelCompatibilityMapping200Response]
    def list_model_compatibility_mapping(opts = {})
      data, _status_code, _headers = list_model_compatibility_mapping_with_http_info(opts)
      data
    end

    # /api/v1/models/compatibility_mapping
    # Returns a list of model compatibility mappings and the associated model.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type  (default to 'text')
    # @return [Array<(ListModelCompatibilityMapping200Response, Integer, Hash)>] ListModelCompatibilityMapping200Response data, response status code and response headers
    def list_model_compatibility_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.list_model_compatibility_mapping ...'
      end
      allowable_values = ["embedding", "image", "text", "tts", "upscale", "inpaint"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/models/compatibility_mapping'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListModelCompatibilityMapping200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ModelsApi.list_model_compatibility_mapping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#list_model_compatibility_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/models/traits
    # Returns a list of model traits and the associated model.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type  (default to 'text')
    # @return [ListModelTraits200Response]
    def list_model_traits(opts = {})
      data, _status_code, _headers = list_model_traits_with_http_info(opts)
      data
    end

    # /api/v1/models/traits
    # Returns a list of model traits and the associated model.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type  (default to 'text')
    # @return [Array<(ListModelTraits200Response, Integer, Hash)>] ListModelTraits200Response data, response status code and response headers
    def list_model_traits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.list_model_traits ...'
      end
      allowable_values = ["embedding", "image", "text", "tts", "upscale", "inpaint"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/models/traits'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListModelTraits200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ModelsApi.list_model_traits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#list_model_traits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /api/v1/models
    # Returns a list of available models supported by the Venice.ai API for both text and image inference.
    # @param [Hash] opts the optional parameters
    # @option opts [ListModelsTypeParameter] :type 
    # @return [ListModels200Response]
    def list_models(opts = {})
      data, _status_code, _headers = list_models_with_http_info(opts)
      data
    end

    # /api/v1/models
    # Returns a list of available models supported by the Venice.ai API for both text and image inference.
    # @param [Hash] opts the optional parameters
    # @option opts [ListModelsTypeParameter] :type 
    # @return [Array<(ListModels200Response, Integer, Hash)>] ListModels200Response data, response status code and response headers
    def list_models_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.list_models ...'
      end
      # resource path
      local_var_path = '/models'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListModels200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ModelsApi.list_models",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#list_models\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
