=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250709.013306

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'spec_helper'
require 'json'

# Unit tests for VeniceClient::ChatApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ChatApi' do
  before do
    # run before each test
    VeniceClient.configure do |config|
      # Configure Bearer authorization: BearerAuth
      config.access_token = ENV['VENICE_API_KEY'] || 'YOUR_API_KEY'
      config.debugging = true
    end
    @api_instance = VeniceClient::ChatApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ChatApi' do
    it 'should create an instance of ChatApi' do
      expect(@api_instance).to be_instance_of(VeniceClient::ChatApi)
    end
  end

  # unit tests for create_chat_completion
  # /api/v1/chat/completions
  # Run text inference based on the supplied parameters. Long running requests should use the streaming API by setting stream&#x3D;true in your request.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_encoding Supported compression encodings (gzip, br). Only applied when stream is false.
  # @option opts [ChatCompletionRequest] :chat_completion_request 
  # @return [CreateChatCompletion200Response]
  describe 'create_chat_completion test' do
    it 'should work with venice-uncensored model' do
      # Create a user message
      user_message = VeniceClient::UserMessage.new(
        role: 'user',
        content: 'Hello, world!'
      )

      # Create the chat completion request
      chat_completion_request = VeniceClient::ChatCompletionRequest.new(
        model: 'venice-uncensored',
        messages: [user_message],
        parallel_tool_calls: false
      )

      begin
        # Make the API call
        result = @api_instance.create_chat_completion(chat_completion_request: chat_completion_request)

        # Add assertions
        expect(result).to be_instance_of(VeniceClient::CreateChatCompletion200Response)
        expect(result.choices).not_to be_empty
      rescue VeniceClient::ApiError => e
        puts "API Error: #{e.message}"
        puts "Response body: #{e.response_body}"
        fail e
      end
    end
  end

end
