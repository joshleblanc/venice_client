=begin
#Venice.ai API

#The Venice.ai API.

The version of the OpenAPI document: 20250709.013306

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'spec_helper'
require 'json'

# Unit tests for VeniceClient::APIKeysApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'APIKeysApi' do
  before do
    # run before each test
    @api_instance = VeniceClient::APIKeysApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of APIKeysApi' do
    it 'should create an instance of APIKeysApi' do
      expect(@api_instance).to be_instance_of(VeniceClient::APIKeysApi)
    end
  end

  # unit tests for create_api_key
  # /api/v1/api_keys
  # Create a new API key.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateApiKeyRequest] :create_api_key_request 
  # @return [CreateApiKey200Response]
  describe 'create_api_key test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_api_key
  # /api/v1/api_keys
  # Delete an API key.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id The ID of the API key to delete
  # @return [DeleteApiKey200Response]
  describe 'delete_api_key test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_key_generate_web3_key
  # /api/v1/api_keys/generate_web3_key
  # Returns the token required to generate an API key via a wallet.
  # @param [Hash] opts the optional parameters
  # @return [GetApiKeyGenerateWeb3Key200Response]
  describe 'get_api_key_generate_web3_key test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_key_rate_limit_logs
  # /api/v1/api_keys/rate_limits/log
  # Returns the last 50 rate limits that the account exceeded.
  # @param [Hash] opts the optional parameters
  # @return [GetApiKeyRateLimitLogs200Response]
  describe 'get_api_key_rate_limit_logs test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_key_rate_limits
  # /api/v1/api_keys/rate_limits
  # Return details about user balances and rate limits.
  # @param [Hash] opts the optional parameters
  # @return [GetApiKeyRateLimits200Response]
  describe 'get_api_key_rate_limits test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_keys
  # /api/v1/api_keys
  # Return a list of API keys.
  # @param [Hash] opts the optional parameters
  # @return [GetApiKeys200Response]
  describe 'get_api_keys test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for post_api_key_generate_web3_key
  # /api/v1/api_keys/generate_web3_key
  # Authenticates a wallet holding sVVV and creates an API key.
  # @param [Hash] opts the optional parameters
  # @option opts [PostApiKeyGenerateWeb3KeyRequest] :post_api_key_generate_web3_key_request 
  # @return [CreateApiKey200Response]
  describe 'post_api_key_generate_web3_key test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
